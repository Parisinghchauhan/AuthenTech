import tensorflow as tf
import json
import os


def load_image(x): 
    byte_img = tf.io.read_file(x)
    img = tf.io.decode_jpeg(byte_img)
    return img
train_images = tf.data.Dataset.list_files('C:\\Users\\priya\\OneDrive\\Desktop\\project Final DTI\\data\\train\\images', shuffle=False)

train_images = train_images.map(load_image)

def load_labels(label_path):
    with open(label_path.numpy(), 'r', encoding="utf-8") as f:
        label = json.load(f)
    return [label['class']], label['bbox']

train_labels = tf.data.Dataset.list_files(os.listdir('C:\\Users\\priya\\OneDrive\\Desktop\\project Final DTI\\data\\train\\labels'), shuffle=False)
#train_labels = tf.data.Dataset.list_files(os.listdir('C:\\Users\\priya\\OneDrive\\Desktop\\project Final DTI\\data\\train\\labels'), shuffle=False)
train_labels = train_labels.map(lambda x: tf.py_function(load_labels, [x], [tf.uint8, tf.float16])) 
train = tf.data.Dataset.zip((train_images, train_labels))
train = train.shuffle(5000)
train = train.batch(8)
train = train.prefetch(4)

inputs = tf.keras.Input(shape=(96, 96, 3))
rescale = tf.keras.layers.Rescaling(1./127.5, offset=-1)
first_layer = tf.keras.layers.RandomFlip('horizontal')
layer_2 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')
layer_3 = tf.keras.layers.MaxPool2D(2, 2)
layer_4 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')
layer_5 = tf.keras.layers.MaxPool2D(2, 2)
layer_6 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')
layer_7 = tf.keras.layers.MaxPool2D(2, 2)
layer_8 = tf.keras.layers.Flatten()
layer_9 = tf.keras.layers.Dense(128, activation='relu')
layer_10 = tf.keras.layers.Dense(1, activation='sigmoid')

x = rescale(inputs)
x = first_layer(x)
x = layer_2(x)
x = layer_3(x)
x = layer_4(x)
x = layer_5(x)
x = layer_6(x)
x = layer_7(x)
x = layer_8(x)
x = layer_9(x)
outputs = layer_10(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.summary()

print("Model output shape:", outputs.shape)

for images, labels in train.take(1):
    print("Labels shape:", labels[0].shape)

model.fit(train, epochs=10)
